datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  name            String?
  email           String           @unique
  hashedPassword  String?
  role            UserRole         @default(USER)
  phone           String           @unique
  watching        Watcher[]
  viewed          Viewer[]
  locations       UserLocation[]
  currentSchoolId Int?             @map("current_school_id")
  currentSchool   School?          @relation(fields: [currentSchoolId], references: [id], onDelete: Cascade)
  subscription    SubscriptionType @default(FREE)
  posts           Post[]

  tokens   Token[]
  sessions Session[]

  @@map("users")
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  @@map("sessions")
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
  @@map("tokens")
}

model Location {
  id            Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  regionName    String         @map("region_name")
  regionCode    String         @map("region_code")
  districtName  String         @map("district_name")
  districtCode  String         @map("district_code")
  wardName      String         @map("ward_name")
  wardCode      String         @map("ward_code")
  streetName    String         @map("street_name")
  schools       School[]
  userLocations UserLocation[]
  postLocations PostLocation[]

  @@map("locations")
}

model UserLocation {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     Int      @map("user_id")
  locationId Int      @map("location_id")
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, locationId], name: "userLocationUniqueness")
  @@map("user_locations")
}

model PostLocation {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  locationId Int      @map("location_id")
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  postId     Int      @map("post_id")
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, locationId], name: "postLocationUniqueness")
  @@map("post_locations")
}

model Post {
  id           Int               @id @default(autoincrement())
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  userId       Int               @map("user_id")
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  locations    PostLocation[]
  postViewers  Viewer[]
  postWatchers Watcher[]
  subjects     TeachingSubject[]
  type         SchoolType        @default(NORMAL)

  @@map("posts")
}

model Viewer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  count     Int      @default(1)
  userId    Int      @map("user_id")
  postId    Int      @map("post_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId], name: "viwerUniqueness")
  @@map("viewers")
}

model Watcher {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int      @map("user_id")
  postId    Int      @map("post_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId], name: "watcherUniquness")
  @@map("watchers")
}

model Subject {
  id        Int               @id @default(autoincrement())
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  name      String
  level     EducationLevel
  posts     TeachingSubject[]

  @@unique([name, level], name: "subjectsUniqueness")
  @@map("subjects")
}

model TeachingSubject {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    Int      @map("post_id")
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  subjectId Int      @map("subject_id")
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([subjectId, postId], name: "teachingSubjectsUniquess")
  @@map("teaching_subjects")
}

model School {
  id         Int                    @id @default(autoincrement())
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt
  userId     Int                    @map("user_id")
  teachers   User[]
  type       SchoolType             @default(NORMAL)
  name       String
  locationId Int                    @map("location_id")
  location   Location               @relation(fields: [locationId], references: [id], onDelete: Cascade)
  levels     SchoolEducationLevel[]

  @@unique([locationId, name, type], name: "schoolUniqueness")
  @@map("schools")
}

model SchoolEducationLevel {
  id        Int            @id @default(autoincrement())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  schoolId  Int            @map("school_id")
  school    School         @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  level     EducationLevel @default(PRIMARY)

  @@unique([schoolId, level], name: "schoolsEducationLevelUniqueness")
  @@map("schools_education_levels")
}

enum TokenType {
  RESET_PASSWORD
}

enum SubscriptionType {
  FREE
  PAID_ONE
  PAID_TWO
  PAID_THREE
}

enum EducationLevel {
  SECONDARY
  PRIMARY
  ADVANCE
}

enum SchoolType {
  NORMAL
  SPECIAL
  TECH
  CENTER
}

enum UserRole {
  USER
  ADMIN
}
